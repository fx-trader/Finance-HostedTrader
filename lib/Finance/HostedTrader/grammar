start_indicator:        statement_indicator /\Z/               {$item[1]}

start_signal:           statement_signal /\Z/               {$item[1]}

statement_indicator:    expression(s /,/) {join(',', map { (/^[0-9]/ ? $_ : "$_") } @{$item[1]})}

statement_signal:       <leftop: signal boolop signal > { $item[1] }

statement: statement_indicator | statement_signal

boolop: 'and' | 'or'

signal:
                'crossoverup' '(' expression ',' number ')' { my $key = Finance::HostedTrader::ExpressionParser::getID("crossoverup","ta_previous($item[3],1)", $item[5], $item[3], $item[5]); $key }
              | 'crossoverup' '(' expression ',' expression ')' { my $key = Finance::HostedTrader::ExpressionParser::getID("crossoverup","ta_previous($item[3],1)", "ta_previous($item[5],1)", $item[3], $item[5]); $key }
              | 'crossoverdown' '(' expression ',' number ')' { my $key = Finance::HostedTrader::ExpressionParser::getID("crossoverdown","ta_previous($item[3],1)", $item[5], $item[3], $item[5]); $key }
              | 'crossoverdown' '(' expression ',' expression ')' { my $key = Finance::HostedTrader::ExpressionParser::getID("crossoverdown","ta_previous($item[3],1)", "ta_previous($item[5],1)", $item[3], $item[5]); $key }
              | expression cmp_op expression      { my $key = Finance::HostedTrader::ExpressionParser::getID("cmpop$item[2]",$item[1],$item[3]); $key }
              | expression

cmp_op:         '>=' | '>' | '<=' | '<'

expression:     term math_op expression      {"$item[1] $item[2] $item[3]"}
              | term

math_op:        '+' | '-' | '*' | '/'

#Timeframes can start with a number, ie: 4hour, hence, the 'number'
#term needs to come after the 'timeframe' term otherwise the 'number'
#term consumes the 4 and timeframe term consumes hour instead of 4hour
term:           timeframe
              | number
              | field
              | function
              | '(' statement ')'        {"($item[2])"}

number:         /-?\d+(\.\d+)?/

field:          "datetime" | "open" | "high" | "low" | "close"

timeframe:
        '1minute(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 60); $item[2] } |
        '5minute(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 300); $item[2] } |
        '15minute(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 900); $item[2] } |
        '30minute(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 1800); $item[2] } |
        'hour(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 3600); $item[2] } |
        '2hour(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 7200); $item[2] } |
        '3hour(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 10800); $item[2] } |
        '4hour(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 14400); $item[2] } |
        '8hour(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 28800); $item[2] } |
        'day(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 86400); $item[2] } |
        'week(' function ')' { Finance::HostedTrader::ExpressionParser::SetIndicatorTimeframe($item[2], 604800); $item[2] }

function:
        'ema(' expression ',' number ')' { "round(ta_ema($item[2],$item[4]), 4)" } |
        'sma(' expression ',' number ')' { "round(" . Finance::HostedTrader::ExpressionParser::GetIndicatorTimeframe("ta_sma($item[2],$item[4])", "ta_sma_win($item[2],$item[4]) OVER (PARTITION BY datetime_TIMEFRAME ORDER BY datetime)") . ", 4)" } |
        'rsi(' expression ',' number ')' { "round(" . Finance::HostedTrader::ExpressionParser::GetIndicatorTimeframe("ta_rsi($item[2],$item[4])", "ta_rsi_win($item[2],$item[4]) OVER (PARTITION BY datetime_TIMEFRAME ORDER BY datetime)") . ", 2)" } |
        'max(' expression ',' number ')' { "ta_max($item[2],$item[4])" } |
        'min(' expression ',' number ')' { "ta_min($item[2],$item[4])" } |
        'tr(' ')'  { "round(ta_tr(high,low,close), 4)" } |
        'atr(' number ')'  { "round(" . Finance::HostedTrader::ExpressionParser::GetIndicatorTimeframe("ta_ssma(ta_tr(high,low,close),$item[2])", "ta_atr_win(high, low, close, $item[2]) OVER (PARTITION BY datetime_TIMEFRAME ORDER BY datetime)") . ", 4)" } |
        'stddev(' expression ',' number ')' { "round(ta_stddevp($item[2],$item[4]), 4)" } |
        'previous(' expression ',' number ')' { "ta_previous($item[2],$item[4])" } |
        'bolhigh(' expression ',' number ',' number ')' { "round(ta_sma($item[2],$item[4]) + $item[6]*ta_stddevp($item[2], $item[4]), 4)" } |
        'bollow(' expression ',' number ',' number ')' { "round(ta_sma($item[2],$item[4]) - $item[6]*ta_stddevp($item[2], $item[4]), 4)" } |
        'trend(' expression ',' number ')' { "round(($item[2] - ta_sma($item[2],$item[4])) / (SQRT(ta_sum(POW($item[2] - ta_sma($item[2], $item[4]), 2), $item[4])/$item[4])), 2)" } |
        'macd(' expression ',' number ',' number ',' number ')' { "round(ta_ema($item[2],$item[4]) - ta_ema($item[2],$item[6]), 4)" } |
        'macdsig(' expression ',' number ',' number ',' number ')' { "round(ta_ema(ta_ema($item[2],$item[4]) - ta_ema($item[2],$item[6]),$item[8]),4)" } |
        'macddiff(' expression ',' number ',' number ',' number ')' { "round((ta_ema($item[2],$item[4]) - ta_ema($item[2],$item[6])) - (ta_ema(ta_ema($item[2],$item[4]) - ta_ema($item[2],$item[6]),$item[8])),4)" } |
        'abs(' expression ')' { "round(abs($item[2]), 4)" } |
        'weekday(' expression ')' { "weekday($item[2])" } |
        'dayname(' expression ')' { "dayname($item[2])" }
